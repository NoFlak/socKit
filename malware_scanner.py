import winreg
import subprocess

class MalwareRegistryScanner:
    def __init__(self):
        self.registry_paths = {
            "HKCU": r"Software\Microsoft\Windows\CurrentVersion\Run",
            "HKLM": r"Software\Microsoft\Windows\CurrentVersion\Run",
            "HKLM_StartupApproved": r"Software\Microsoft\Windows\CurrentVersion\StartupApproved\Run",
            "HKLM_Services": r"SYSTEM\CurrentControlSet\Services"
        }

        self.suspicious_keywords = [
            "cmd.exe", "powershell", "vbs", "wscript", "regsvr32",
            "curl", "bitsadmin", "schtasks", ".bat", ".js", "startup",
            "appdata", "temp", "system32", "autorun"
        ]

        self.severe_keywords = [
            "ransomware", "cryptolocker", "coinminer", "keylogger"
        ]

        self.total_entries = 0
        self.suspicious_count = 0
        self.severe_count = 0

    def get_hive(self, hive_name):
        if hive_name == "HKCU":
            return winreg.HKEY_CURRENT_USER
        elif hive_name.startswith("HKLM"):
            return winreg.HKEY_LOCAL_MACHINE
        else:
            raise ValueError(f"Unknown hive: {hive_name}")

    def scan_registry(self):
        print("\nüîç Scanning Registry for Auto-Start Entries...\n")
        for hive_name, subkey in self.registry_paths.items():
            hive = self.get_hive(hive_name)
            print(f"üìÇ {hive_name}\\{subkey}")
            try:
                with winreg.OpenKey(hive, subkey) as key:
                    count = winreg.QueryInfoKey(key)[1]
                    if count == 0:
                        print("  (No entries found)")
                    for i in range(count):
                        name, value, _ = winreg.EnumValue(key, i)
                        self.total_entries += 1
                        value_lower = str(value).lower()
                        is_suspicious = any(k in value_lower for k in self.suspicious_keywords)
                        is_severe = any(k in value_lower for k in self.severe_keywords)
                        if is_severe:
                            self.severe_count += 1
                        if is_suspicious:
                            self.suspicious_count += 1
                        status = "‚ö†Ô∏è SEVERE" if is_severe else ("‚ö†Ô∏è SUSPICIOUS" if is_suspicious else "‚úÖ")
                        print(f"  {status} {name}: {value}")
            except FileNotFoundError:
                print("  (Key not found)")
            except Exception as e:
                print(f"  ‚ö†Ô∏è Error reading {hive_name}\\{subkey}: {e}")
            print()

    def list_scheduled_tasks(self):
        print("üìÖ Listing Scheduled Tasks...\n")
        suspicious_tasks = []
        try:
            result = subprocess.run(
                ["schtasks", "/query", "/fo", "LIST", "/v"],
                capture_output=True, text=True, shell=True
            )
            lines = result.stdout.splitlines()
            current_task = []

            for line in lines:
                if line.strip() == "":
                    task_block = "\n".join(current_task)
                    if any(k in task_block.lower() for k in self.suspicious_keywords):
                        suspicious_tasks.append(task_block)
                    current_task = []
                else:
                    current_task.append(line)

            if suspicious_tasks:
                print(f"‚ö†Ô∏è Found {len(suspicious_tasks)} suspicious scheduled task(s):\n")
                for task in suspicious_tasks:
                    print(task)
                    print("-" * 60)
            else:
                print("‚úÖ No suspicious scheduled tasks found.")
        except Exception as e:
            print(f"‚ö†Ô∏è Error retrieving scheduled tasks: {e}")

        return len(suspicious_tasks)

    def run_full_scan(self):
        print("\nüõ°Ô∏è Starting Malware Persistence Full Scan...\n")
        self.scan_registry()
        suspicious_tasks_count = self.list_scheduled_tasks()

        print("\n--- Scan Summary ---")
        print(f"Total registry entries scanned: {self.total_entries}")
        print(f"Suspicious registry entries found: {self.suspicious_count}")
        print(f"Severe registry entries found: {self.severe_count}")
        print(f"Suspicious scheduled tasks found: {suspicious_tasks_count}")
        print("\n‚úÖ Scan complete. Please review the above entries carefully.\n")

if __name__ == "__main__":
    scanner = MalwareRegistryScanner()
    scanner.run_full_scan()
